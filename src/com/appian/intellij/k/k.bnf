{
  parserClass="com.appian.intellij.k.parser.KParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="K"
  psiImplClassSuffix="Impl"
  psiPackage="com.appian.intellij.k.psi"
  psiImplPackage="com.appian.intellij.k.psi.impl"

  elementTypeHolderClass="com.appian.intellij.k.psi.KTypes"
  elementTypeClass="com.appian.intellij.k.psi.KElementType"
  tokenTypeClass="com.appian.intellij.k.psi.KTokenType"

  /*  http://kparc.com/parse.txt

  / comment

  1 2 2.4 0N 3 43 0i / numbers

  19

  1 + 44

  3

  ( 3 )

  12.5 + 33 + 1

   1 33

  "string"

  {`"symbol"}

  `a `b

  `b`s`d

  (identifier)


  TOKEN ;a0`"+

  a:[a-zA-Z]                         / alpha
  d:[0-9]                            / digit
  p:[;()[]{}]                        / punctuation
  o:[:+-*%!&|<>=~,^#_$?@.'/\]        / operator

  n:(![]})ad]-)?(d*.)?d+(e-?d+)?        / number, e.g. -2
  i:a[ad]*                              / identifier
  s:`[ad]*                              / symbol
  t:p|i(.i)*|n( n)*|s+|"_*"|o:?| (/_*)? / token

  (+:;a.b;2 -.3;`a`bc) / nine tokens and comment

  lexical analysis is fairly simple. punctuation is normal. operators have optional':'.
  characters("ab"), numbers(2 -3) and symbols(`a`bc) are atom or vector(more than one).
  "2-3" is three tokens and "2 -3" is one token. end-of-line comment with [space]/ .

  PARSE Noun(x) Verb(+) Adverb(/)

  e:nve|te| t:n|v v:tA|V n:t[E]|(E)|[E]|{E}|N E:;e

  (+/x)%#x  is  (%;((/;+);x);(#:;x))

  SCRIPTS have nested multi-line comments with / and \ .
  multi-line functions(and data) with indentation. newlines are treated like ;'s .  */

  tokens=[

  /*
  whitespace='regexp:\s+'
      bang='!'
      quote='"'
      hash='#'
      dollar='$'
      percent='%'
      ampersand='&'
      tick="'"
      open_paren='('
      close_paren=')'
      asterisk='*'
      plus='+'
      comma=','
      dash='-'
      period='.'
      slash='/'
      digit='regexp:[0-9]'
      colon=':'
      semicolon=';'
      less_than='<'
      equals='='
      greater_than='>'
      question_mark='?'
      alpha='regexp:[a-zA-Z]'
      at='@'
      open_bracket='['
      back_slash='\'
      close_bracet=']'
      caret='^'
      underscore='_'
      back_tick='`'
      open_brace='{'
      pipe='|'
      close_brace='}'
      tilde='~'
   */

    // ascii chars
    bang='!'
    quote='"'
    hash='#'
    dollar='$'
    percent='%'
    ampersand='&'
    tick="'"
    open_paren='('
    close_paren=')'
    asterisk='*'
    plus='+'
    comma=','
    dash='-'
    period='.'
    slash='/'
    colon=':'
    semicolon=';'
    less_than='<'
    equals='='
    greater_than='>'
    question_mark='?'
    at='@'
    open_bracket='['
    back_slash='\'
    close_bracket=']'
    caret='^'
    underscore='_'
    back_tick='`'
    open_brace='{'
    pipe='|'
    close_brace='}'
    tilde='~'

    // adverbs
    slash_colon='/:'
    back_slash_colon='\:'
    tick_colon="':"

    // names
    identifier='regexp:[a-zA-Z][._a-zA-Z0-9]*'
    identifier_sys='regexp:_[._a-zA-Z0-9]*'

    // nouns
    nil='_n'
    number='regexp:((0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?|0[iInN])'
    char='regexp:"(\\"|[^"])"'
    string='regexp:"(\\"|[^"])*"'

    // system verbs and nouns

    // i/o, dynamic load and client/server
    zeroColon='0:'
    oneColon='1:'
    twoColon='2:'
    threeColon='3:'
    fourColon='4:'
    fiveColon='5:'
    sixColon='6:'

    // assign, define, control and debug
    if="if"
    do="do"
    while="while"

    // punctuation
    newline='regexp:\r|\n|\r\n'
  ]
}

root ::= E0+ <<eof>>
private E0 ::= separator
             | E1
private E1 ::= control
             | comment
             | E2
private E2 ::= assignment
             | conditional
             | result
             | indexing
             | value
             | group

private separator ::= semicolon | newline

private group ::= open_paren E1 close_paren

private id ::= identifier | identifier_sys

value ::= monad op value | monad
private monad ::= op monad | noun

private noun ::= list | atom | id

list ::= homogeneousList | heterogeneousList
private homogeneousList ::= symbolVector | numberVector | string
numberVector ::= number number+
symbolVector ::= symbol symbol+
private heterogeneousList ::= open_paren ([E1] separator [E1])* close_paren

private atom ::= symbol | number | char | nil | function
function ::= open_brace [index] E0* close_brace

indexing ::= id index
private index ::= open_bracket E0* close_bracket | open_bracket period? close_bracket
control ::= (if | do | while) index

private op ::= verb | adverb | id | function// | heterogeneousList .e.g list indexing (1;2) 0
private verb ::= bang
              |  hash
              |  dollar
              |  percent
              |  ampersand
              |  asterisk
              |  plus
              |  comma
              |  dash
              |  period
              |  less_than
              |  equals
              |  greater_than
              |  question_mark
              |  at
              |  caret
              |  underscore
              |  pipe
              |  tilde
private adverb ::= slash
                |  slash_colon
                |  back_slash
                |  back_slash_colon
                |  tick
                |  tick_colon

assignment ::= id [index] [verb] colon E2
             | id colon colon E2

conditional ::= colon index

result ::= colon E2
