"a"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"a"')
  PsiElement(KTokenType.newline)('\n')
============|
" "
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('" "')
  PsiElement(KTokenType.newline)('\n')
============|
"\""
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\""')
  PsiElement(KTokenType.newline)('\n')
============|
"\t"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\t"')
  PsiElement(KTokenType.newline)('\n')
============|
"\n"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\n"')
  PsiElement(KTokenType.newline)('\n')
============|
"\r"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\r"')
  PsiElement(KTokenType.newline)('\n')
============|
"\b"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\b"')
  PsiElement(KTokenType.newline)('\n')
============|
"\\"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\\"')
  PsiElement(KTokenType.newline)('\n')
============|
"
"
------------>
Element(FILE)
  Element(NOUN)
    PsiElement(KTokenType.char)('"\n"')
  PsiElement(KTokenType.newline)('\n')
============|
"\"
------------>
Element(FILE)
  PsiErrorElement:<assignment>, <control>, <monad>, <noun>, KTokenType.:, KTokenType.;, KTokenType.comment, KTokenType.directory or KTokenType.newline expected, got '"'
    PsiElement(BAD_CHARACTER)('"')
  PsiElement(BAD_CHARACTER)('\')
  PsiElement(BAD_CHARACTER)('"')
  PsiElement(KTokenType.newline)('\n')
============|
"""
------------>
Element(FILE)
  PsiElement(KTokenType.string)('""')
  PsiErrorElement:<assignment>, <control>, <infix>, <monad>, <noun>, KTokenType.:, KTokenType.;, KTokenType.comment, KTokenType.directory or KTokenType.newline expected, got '"'
    PsiElement(BAD_CHARACTER)('"')
  PsiElement(KTokenType.newline)('\n')
