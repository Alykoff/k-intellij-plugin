"a"
------------>
PsiElement(KTokenType.char)('"a"')
============|


" "
------------>
PsiElement(KTokenType.char)('" "')
============|


"\""
------------>
PsiElement(KTokenType.char)('"\""')
============|


"\t"
------------>
PsiElement(KTokenType.char)('"\t"')
============|


"\n"
------------>
PsiElement(KTokenType.char)('"\n"')
============|


"\r"
------------>
PsiElement(KTokenType.char)('"\r"')
============|


"\b"
------------>
PsiElement(KTokenType.char)('"\b"')
============|


"\\"
------------>
PsiElement(KTokenType.char)('"\\"')
============|


"
"
------------>
PsiElement(KTokenType.char)('"\n"')
============|


"\"
------------>
Element(FILE)
  PsiErrorElement:<control>, <dyad>, <indexing>, <monad>, <projection>, KTokenType.(, KTokenType.:, KTokenType.;, KTokenType.char, KTokenType.comment, KTokenType.composed_monad, KTokenType.derived_verb, KTokenType.directory, KTokenType.identifier, KTokenType.identifier_sys, KTokenType.newline, KTokenType.number, KTokenType.number_vector, KTokenType.string, KTokenType.symbol, KTokenType.symbol_vector, KTokenType.verb or KTokenType.{ expected, got '"'
    PsiElement(BAD_CHARACTER)('"')
  PsiElement(BAD_CHARACTER)('\')
  PsiElement(BAD_CHARACTER)('"')
============|


"""
------------>
Element(FILE)
  PsiElement(KTokenType.string)('""')
  PsiErrorElement:<control>, <dyad>, <indexing>, <monad>, <projection>, KTokenType.(, KTokenType.:, KTokenType.;, KTokenType.char, KTokenType.comment, KTokenType.composed_monad, KTokenType.derived_verb, KTokenType.directory, KTokenType.identifier, KTokenType.identifier_sys, KTokenType.newline, KTokenType.number, KTokenType.number_vector, KTokenType.string, KTokenType.symbol, KTokenType.symbol_vector, KTokenType.verb or KTokenType.{ expected, got '"'
    PsiElement(BAD_CHARACTER)('"')
